//
// This file was generated by the Eclipse Implementation of JAXB, v4.0.5
// See https://eclipse-ee4j.github.io/jaxb-ri
// Any modifications to this file will be lost upon recompilation of the source schema.
//

package fr.gouv.culture.archivesdefrance.seda.v22;

import jakarta.xml.bind.annotation.XmlAccessType;
import jakarta.xml.bind.annotation.XmlAccessorType;
import jakarta.xml.bind.annotation.XmlElement;
import jakarta.xml.bind.annotation.XmlIDREF;
import jakarta.xml.bind.annotation.XmlSchemaType;
import jakarta.xml.bind.annotation.XmlType;

/**
 * Contient la référence à l'objet signé (et son empreinte jusqu'à la fin de la phase de versement
 * dans le SAE).
 *
 * <p>Java class for ReferencedObjectType complex type.
 *
 * <p>The following schema fragment specifies the expected content contained within this class.
 *
 * <pre>{@code
 * <complexType name="ReferencedObjectType">
 *   <complexContent>
 *     <restriction base="{http://www.w3.org/2001/XMLSchema}anyType">
 *       <sequence>
 *         <element name="SignedObjectId" type="{fr:gouv:culture:archivesdefrance:seda:v2.2}DataObjectRefIdType"/>
 *         <element name="SignedObjectDigest" type="{fr:gouv:culture:archivesdefrance:seda:v2.2}MessageDigestBinaryObjectType"/>
 *       </sequence>
 *     </restriction>
 *   </complexContent>
 * </complexType>
 * }</pre>
 */
@XmlAccessorType(XmlAccessType.FIELD)
@XmlType(
    name = "ReferencedObjectType",
    propOrder = {"signedObjectId", "signedObjectDigest"})
public class ReferencedObjectType {

  /** Identifiant de l'objet-données signé. */
  @XmlElement(name = "SignedObjectId", required = true)
  @XmlIDREF
  @XmlSchemaType(name = "IDREF")
  protected Object signedObjectId;

  /**
   * Empreinte obligatoire jusqu'au processus de versement pour assurer la portabilité de la valeur
   * probante. Le SAE peut ne pas la conserver si l'on considère que l'identifiant de l'objet
   * correspondant suffit. Ce procédé permet de résister au temps lorsque les informations binaires
   * du paquet seront converties au gré des opérations de préservation de la lisibilité des formats.
   * Au cours de ces opérations, l'identifiant ne changera pas, contrairement au format dufichier et
   * donc à son empreinte.
   */
  @XmlElement(name = "SignedObjectDigest", required = true)
  protected MessageDigestBinaryObjectType signedObjectDigest;

  /**
   * Identifiant de l'objet-données signé.
   *
   * @return possible object is {@link Object }
   */
  public Object getSignedObjectId() {
    return signedObjectId;
  }

  /**
   * Sets the value of the signedObjectId property.
   *
   * @param value allowed object is {@link Object }
   * @see #getSignedObjectId()
   */
  public void setSignedObjectId(Object value) {
    this.signedObjectId = value;
  }

  /**
   * Empreinte obligatoire jusqu'au processus de versement pour assurer la portabilité de la valeur
   * probante. Le SAE peut ne pas la conserver si l'on considère que l'identifiant de l'objet
   * correspondant suffit. Ce procédé permet de résister au temps lorsque les informations binaires
   * du paquet seront converties au gré des opérations de préservation de la lisibilité des formats.
   * Au cours de ces opérations, l'identifiant ne changera pas, contrairement au format dufichier et
   * donc à son empreinte.
   *
   * @return possible object is {@link MessageDigestBinaryObjectType }
   */
  public MessageDigestBinaryObjectType getSignedObjectDigest() {
    return signedObjectDigest;
  }

  /**
   * Sets the value of the signedObjectDigest property.
   *
   * @param value allowed object is {@link MessageDigestBinaryObjectType }
   * @see #getSignedObjectDigest()
   */
  public void setSignedObjectDigest(MessageDigestBinaryObjectType value) {
    this.signedObjectDigest = value;
  }
}
